1.. create a sample django app that has some api end points 

 a))creating addUser
   ##note JsonResponse is imported from django.http
          JsonResponse needs data(dict) to be returned 

def addUser(request):
    val={
        'response':'User Added'

    }
    print("hello addUser")
    status=200
    return JsonResponse(val,status=status)


###Jsonrespon_le_pani_afai_display_hune_rahecha_bothin_page_and_console
===>after yo if we run the server and go to this Url 
first)in the web page
     {"response": "User Added"}

second) in the console
         hello addUser
        [29/Sep/2021 00:01:50] "GET /addUser HTTP/1.1" 200 26


b))addSomething

c)) addNew/<somerandomnum> 
##note status 500 is Internal server error

this returns 500 if some random num is > 50


d))addNewError
here, we make an actual exceptional error and sending the traceback into my front command


##so basically internal server error without try and except crashes the program 
   but the use of try and except, the except handles the exception that is it prints 
   what is wrong without crashing the prog.``



2...
write a notebook to test api 


##note practise of requests (import requests
				url='http://localhost:8000/'
				res=requests.get(url)
					or
				res=requests.get(url+"admin")
				res.text
					
				)


                                 
===>while calling the api 
1st run the server and while calling api separately see the console also 
  a)))calling the first
the outputs are o(inside calling api folderko pic) in the notebook and console respectively 

b))works same
c))works same
d))works same


3..
now the idea is to have the logs of our django application(rather than 
having to observe the console) it be saved in our logs


4..add the log configuration in setting.py


=>logging configuration would have 4 parts 
but in our scenario right now we only care about logger, handler,formater
import os 

LOGGING ={
    'loggers':{

    },
    'handlers':{

    },
    'formatters':{
        
    }
} 


=>to define loggers, there are some standard starting point which comes with the django by default
 those starting django loggers are(django,django.request,django.server,django.db.backend etc)

each logger has different purpose and it serves a particular job 

eg , if i provide only django ,it will catch everything available in taht execution
    and the level or the default level for the Django logger is debug 


==>if i have loggers  
 i can use any number of loogers(with different types)
 and have to define what to do with those in handlers

==>in our case we start with defining django logger, with attributes(handlers,level)
import os 

LOGGING ={
    'loggers':{
        'django':{
            'handlers':[],
            'level':'DEBUG'
        }

    },
    'handlers':{

    },
    'formatters':{

    }
} 


==>now we have to configure the handlers 
in here, the name file can be anything
 for the handler(named file), we define the configuration
                            ==> i)i.e leve(what level??)
                       ##note about level
         		 if we have debug in my handler then ,
			 whatever is coming from the loggers would go to hanler and it
			 then would again decide what kind of log level i Have to cater

                        ##if we provide Info as level in handler but Debug as level in logger
			  then handler would filter and say whatever logs comes above info or info itslef
  			  I would only care about those
				
				
				ii)class-you can have any kind of handlers you want 
				from the logging module of python


				iii)file name-we create a logs folder and files which we want to use and give its path

eg,
import os 

LOGGING ={
    'version':1,
    'loggers':{
        'django':{
            'handlers':['file'],
            'level':'DEBUG'
        }

    },
    'handlers':{
        'file':{
            'level':'DEBUG',
            'class':'logging.FileHandler',
            'filename':'./logs/debug.log',
        }

    },
    'formatters':{

    }
} 




5..
now for the formatters it would also have some configurations

=>
simpleRe is random name which has 
     (format,style) 
the default style of the python midule is the percent mark
but we use { , it gives the info of how to save the log 
when the next msg comes whether to append it immeadeately or  append with the next line all
this info is provided 


import os 

LOGGING ={
    'version':1,
    'loggers':{
        'django':{
            'handlers':['file'],
            'level':'DEBUG'
        }

    },
    'handlers':{
        'file':{
            'level':'DEBUG',
            'class':'logging.FileHandler',
            'filename':'./logs/debug.log',
        }

    },
    'formatters':{
        'simpleRe':{
            'format':'{levelname}{message}',
            'style':'{'
        }

    }
} 



=>after defining formatter introduce it to our configuration

import os 

LOGGING ={
    'version':1,
    'loggers':{
        'django':{
            'handlers':['file'],
            'level':'DEBUG'
        }

    },
    'handlers':{
        'file':{
            'level':'DEBUG',
            'class':'logging.FileHandler',
            'filename':'./logs/debug.log',
            'formatter':'simpleRe' ///yaha
        }

    },
    'formatters':{
        'simpleRe':{
            'format':'{levelname}{message}',
            'style':'{'
        }

    }
} 


6.. lets experiment a bit 

in logger let level be debug 
but in handler let it be info 
create new debug file (debug2)

















 
